#!/bin/bash

# AWS SSO Manager - Script de Instala√ß√£o
# Este script instala as fun√ß√µes AWS SSO no seu sistema

set -e  # Para na primeira falha

echo "üöÄ AWS SSO Manager - Instalador"
echo "================================"

# Verificar requisitos
check_requirements() {
    echo "üîç Verificando requisitos..."
    
    # Verificar AWS CLI
    if ! command -v aws &> /dev/null; then
        echo "‚ùå AWS CLI n√£o encontrado. Instale primeiro: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"
        exit 1
    fi
    
    # Verificar vers√£o do AWS CLI
    aws_version=$(aws --version 2>&1 | grep -o 'aws-cli/[0-9]\+\.[0-9]\+' | cut -d'/' -f2 | cut -d'.' -f1)
    if [ "$aws_version" -lt 2 ]; then
        echo "‚ö†Ô∏è  AWS CLI v2 √© recomendado. Vers√£o atual: $(aws --version)"
        read -p "Continuar mesmo assim? (y/n): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
    
    echo "‚úÖ AWS CLI v2 encontrado"
}

# Backup do .bashrc atual
backup_bashrc() {
    if [ -f ~/.bashrc ]; then
        echo "üíæ Fazendo backup do .bashrc..."
        cp ~/.bashrc ~/.bashrc.backup.$(date +%Y%m%d_%H%M%S)
        echo "‚úÖ Backup salvo em ~/.bashrc.backup.$(date +%Y%m%d_%H%M%S)"
    fi
}

# Instalar fun√ß√µes no .bashrc
install_functions() {
    echo "üì¶ Instalando fun√ß√µes AWS SSO..."
    
    # Verificar se j√° est√° instalado
    if grep -q "# AWS SSO Manager Functions" ~/.bashrc 2>/dev/null; then
        echo "‚ö†Ô∏è  Fun√ß√µes j√° est√£o instaladas no .bashrc"
        read -p "Reinstalar? Isso ir√° duplicar as fun√ß√µes (y/n): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "‚è≠Ô∏è  Pulando instala√ß√£o das fun√ß√µes"
            return 0
        fi
    fi
    
    # Adicionar marcador e fun√ß√µes ao .bashrc
    echo "" >> ~/.bashrc
    echo "# AWS SSO Manager Functions" >> ~/.bashrc
    echo "# Instalado em $(date)" >> ~/.bashrc
    cat functions.sh >> ~/.bashrc
    echo "" >> ~/.bashrc
    
    echo "‚úÖ Fun√ß√µes adicionadas ao ~/.bashrc"
}

# Criar diret√≥rio bin se n√£o existir
setup_bin_directory() {
    if [ ! -d ~/bin ]; then
        echo "üìÅ Criando diret√≥rio ~/bin..."
        mkdir -p ~/bin
        
        # Adicionar ~/bin ao PATH se n√£o estiver
        if [[ ":$PATH:" != *":$HOME/bin:"* ]]; then
            echo "üîó Adicionando ~/bin ao PATH..."
            echo 'export PATH="$HOME/bin:$PATH"' >> ~/.bashrc
        fi
    fi
}

# Instalar scripts auxiliares
install_scripts() {
    echo "üìã Instalando scripts auxiliares..."
    
    setup_bin_directory
    
    # Copiar e dar permiss√£o de execu√ß√£o
    cp add-profile.sh ~/bin/aws-add-profile
    cp switch-profile.sh ~/bin/aws-switch-standalone
    chmod +x ~/bin/aws-add-profile
    chmod +x ~/bin/aws-switch-standalone
    
    echo "‚úÖ Scripts instalados em ~/bin/"
    echo "   - aws-add-profile (para adicionar novos perfis)"
    echo "   - aws-switch-standalone (script standalone)"
}

# Configurar atalhos personaliz√°veis
configure_aliases() {
    echo "‚öôÔ∏è  Configurando atalhos..."
    
    # Perguntar sobre customiza√ß√£o de atalhos
    echo ""
    echo "üéØ Quer configurar atalhos personalizados? (ex: aws-dev, aws-prod)"
    read -p "Configurar atalhos agora? (y/n): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo ""
        echo "Configure seus atalhos (pressione Enter para pular):"
        
        read -p "Perfil de desenvolvimento (ex: empresa-dev): " dev_profile
        read -p "Perfil de produ√ß√£o (ex: empresa-prod): " prod_profile
        read -p "Perfil padr√£o (ex: default): " default_profile
        
        if [ -n "$dev_profile" ] || [ -n "$prod_profile" ] || [ -n "$default_profile" ]; then
            echo "" >> ~/.bashrc
            echo "# AWS SSO Manager - Atalhos Personalizados" >> ~/.bashrc
            
            [ -n "$dev_profile" ] && echo "alias aws-dev='aws-switch $dev_profile'" >> ~/.bashrc
            [ -n "$prod_profile" ] && echo "alias aws-prod='aws-switch $prod_profile'" >> ~/.bashrc
            [ -n "$default_profile" ] && echo "alias aws-default='aws-switch $default_profile'" >> ~/.bashrc
            
            echo "‚úÖ Atalhos personalizados configurados!"
        fi
    fi
}

# Testar instala√ß√£o
test_installation() {
    echo "üß™ Testando instala√ß√£o..."
    
    # Recarregar .bashrc no contexto atual
    source ~/.bashrc
    
    # Verificar se as fun√ß√µes est√£o dispon√≠veis
    if command -v aws-list &> /dev/null; then
        echo "‚úÖ Fun√ß√µes instaladas com sucesso!"
        
        # Mostrar perfis dispon√≠veis se existirem
        echo ""
        echo "üìã Perfis AWS encontrados:"
        aws configure list-profiles 2>/dev/null || echo "   Nenhum perfil configurado ainda"
        
    else
        echo "‚ö†Ô∏è  Fun√ß√µes instaladas mas n√£o carregadas. Execute:"
        echo "   source ~/.bashrc"
    fi
}

# Mostrar pr√≥ximos passos
show_next_steps() {
    echo ""
    echo "üéâ Instala√ß√£o conclu√≠da!"
    echo "======================="
    echo ""
    echo "üìö Pr√≥ximos passos:"
    echo "1. Recarregue o terminal: source ~/.bashrc"
    echo "2. Liste perfis dispon√≠veis: aws-list"
    echo "3. Configure um novo perfil: aws-add-profile"
    echo "4. Fa√ßa login SSO: aws-login <perfil>"
    echo "5. Troque entre perfis: aws-switch <perfil>"
    echo ""
    echo "üìñ Para mais detalhes, veja o README.md"
    echo "üÜò Para suporte: https://github.com/SEU_USUARIO/aws-sso-manager/issues"
}

# Fun√ß√£o principal
main() {
    # Verificar se estamos no diret√≥rio correto
    if [ ! -f "functions.sh" ]; then
        echo "‚ùå Arquivo functions.sh n√£o encontrado."
        echo "Execute este script do diret√≥rio aws-sso-manager/"
        exit 1
    fi
    
    check_requirements
    backup_bashrc
    install_functions
    install_scripts
    configure_aliases
    test_installation
    show_next_steps
}

# Executar instala√ß√£o
main "$@"