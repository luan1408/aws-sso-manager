#!/bin/bash

# AWS SSO Manager - Script de Instala√ß√£o/Atualiza√ß√£o Inteligente
# Detecta vers√µes antigas, remove conflitos e instala vers√£o atualizada

set -e  # Para no primeiro erro

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BASHRC_FILE="$HOME/.bashrc"
AWS_SSO_TEMP_BACKUP="$HOME/.bashrc.aws-sso-backup.$(date +%s)"

echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë          üöÄ AWS SSO Manager - Auto Installer            ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""

# Fun√ß√£o para log colorido
log_info() { echo "‚ÑπÔ∏è  $1"; }
log_success() { echo "‚úÖ $1"; }
log_warning() { echo "‚ö†Ô∏è  $1"; }
log_error() { echo "‚ùå $1"; }

# Backup do .bashrc
backup_bashrc() {
    if [ -f "$BASHRC_FILE" ]; then
        log_info "Criando backup do .bashrc..."
        cp "$BASHRC_FILE" "$AWS_SSO_TEMP_BACKUP"
        log_success "Backup salvo em: $AWS_SSO_TEMP_BACKUP"
    fi
}

# Detecta instala√ß√µes antigas
detect_old_installations() {
    log_info "üîç Detectando instala√ß√µes antigas..."
    
    local found_old=false
    
    # Procura por linhas relacionadas ao AWS SSO Manager
    if grep -q "aws-sso-manager\|AWS SSO Manager\|aws-list\|aws-switch\|aws-menu" "$BASHRC_FILE" 2>/dev/null; then
        log_warning "Encontradas instala√ß√µes antigas no .bashrc"
        
        echo ""
        echo "üìã Linhas encontradas:"
        grep -n "aws-sso-manager\|AWS SSO Manager\|aws-list\|aws-switch\|aws-menu" "$BASHRC_FILE" | head -10
        
        found_old=true
    fi
    
    # Verifica fun√ß√µes j√° carregadas no ambiente atual
    if type aws-list >/dev/null 2>&1; then
        log_warning "Fun√ß√µes AWS SSO j√° carregadas no ambiente atual"
        found_old=true
    fi
    
    if [ "$found_old" = true ]; then
        echo ""
        read -p "üßπ Deseja remover instala√ß√µes antigas e instalar vers√£o limpa? (Y/n): " confirm
        confirm=${confirm:-Y}
        
        if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
            log_error "Instala√ß√£o cancelada pelo usu√°rio"
            exit 1
        fi
    else
        log_success "Nenhuma instala√ß√£o antiga detectada"
    fi
}

# Remove instala√ß√µes antigas
remove_old_installations() {
    log_info "üßπ Removendo instala√ß√µes antigas..."
    
    # Cria arquivo tempor√°rio limpo
    local temp_bashrc=$(mktemp)
    local inside_aws_block=false
    
    # L√™ linha por linha e remove blocos AWS
    while IFS= read -r line; do
        # Detecta in√≠cio de bloco AWS
        if echo "$line" | grep -q "AWS SSO Manager\|aws-sso-manager\|# Lista todos os perfis AWS\|# Fun√ß√£o inteligente para trocar"; then
            inside_aws_block=true
            continue
        fi
        
        # Detecta fim de bloco AWS (linha vazia ap√≥s fun√ß√µes AWS)
        if [ "$inside_aws_block" = true ] && [ -z "$line" ]; then
            inside_aws_block=false
            continue
        fi
        
        # Pula linhas relacionadas ao AWS
        if echo "$line" | grep -q "aws-list\|aws-switch\|aws-menu\|aws-choose\|aws-quick\|aws-who\|aws-login\|aws-logout\|aws-dev\|aws-prod"; then
            continue
        fi
        
        # Mant√©m linha se n√£o estiver em bloco AWS
        if [ "$inside_aws_block" = false ]; then
            echo "$line" >> "$temp_bashrc"
        fi
        
    done < "$BASHRC_FILE"
    
    # Substitui o .bashrc
    mv "$temp_bashrc" "$BASHRC_FILE"
    
    log_success "Instala√ß√µes antigas removidas"
}

# Instala vers√£o atual
install_current_version() {
    log_info "üì¶ Instalando vers√£o atual..."
    
    # Adiciona configura√ß√£o limpa ao .bashrc
    cat >> "$BASHRC_FILE" << EOF

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üöÄ AWS SSO Manager Enhanced - Instala√ß√£o Automatizada
# Instalado automaticamente em: $(date)
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

# Carrega AWS SSO Manager se dispon√≠vel
if [ -f "$SCRIPT_DIR/functions.sh" ]; then
    source "$SCRIPT_DIR/functions.sh"
fi
EOF

    log_success "Instala√ß√£o no .bashrc conclu√≠da"
}

# Valida instala√ß√£o
validate_installation() {
    log_info "üß™ Validando instala√ß√£o..."
    
    # Testa em nova sess√£o bash
    if bash -c "source '$BASHRC_FILE' >/dev/null 2>&1 && type aws-list >/dev/null 2>&1"; then
        log_success "Fun√ß√µes AWS carregadas com sucesso"
        
        # Testa funcionalidade b√°sica
        if bash -c "source '$BASHRC_FILE' >/dev/null 2>&1 && aws-list >/dev/null 2>&1"; then
            log_success "Comando aws-list funcionando"
        else
            log_warning "aws-list com problemas - verifique configura√ß√£o AWS"
        fi
        
    else
        log_error "Falha no carregamento das fun√ß√µes"
        return 1
    fi
}

# Recarrega ambiente
reload_environment() {
    log_info "üîÑ Recarregando ambiente..."
    
    # Limpa fun√ß√µes antigas do ambiente atual
    unset -f aws-list aws-switch aws-who aws-login aws-logout aws-menu 2>/dev/null || true
    unset -f aws-choose aws-quick aws-tree aws-help 2>/dev/null || true
    unset -f _get_current_profile _init_aws_profile 2>/dev/null || true
    
    # Recarrega .bashrc
    if source "$BASHRC_FILE" >/dev/null 2>&1; then
        log_success "Ambiente recarregado com sucesso"
    else
        log_warning "Erro ao recarregar - execute 'source ~/.bashrc' manualmente"
    fi
}

# Mostra instru√ß√µes finais
show_final_instructions() {
    echo ""
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                   ‚úÖ INSTALA√á√ÉO CONCLU√çDA                ‚ïë"
    echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
    echo "‚ïë                                                          ‚ïë"
    echo "‚ïë  üéØ COMANDOS DISPON√çVEIS:                               ‚ïë"
    echo "‚ïë    aws-menu         - Interface interativa               ‚ïë"
    echo "‚ïë    aws-list         - Lista perfis                      ‚ïë"
    echo "‚ïë    aws-switch       - Troca perfil                      ‚ïë"
    echo "‚ïë    aws-who          - Perfil atual                      ‚ïë"
    echo "‚ïë    aws-help         - Ajuda completa                    ‚ïë"
    echo "‚ïë                                                          ‚ïë"
    echo "‚ïë  üí° PARA NOVOS TERMINAIS:                               ‚ïë"
    echo "‚ïë    As fun√ß√µes ser√£o carregadas automaticamente          ‚ïë"
    echo "‚ïë                                                          ‚ïë"
    echo "‚ïë  üîÑ PARA ATUALIZAR NOVAMENTE:                           ‚ïë"
    echo "‚ïë    ./install-or-update.sh                               ‚ïë"
    echo "‚ïë                                                          ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo ""
    
    # Testa comando final
    if type aws-list >/dev/null 2>&1; then
        echo "üéâ Teste final: aws-list funcionando!"
        aws-list 2>/dev/null || echo "‚ö†Ô∏è  Configure seus perfis AWS primeiro"
    else
        echo "‚ö†Ô∏è  Execute 'source ~/.bashrc' para ativar as fun√ß√µes"
    fi
}

# Fun√ß√£o principal
main() {
    echo "üöÄ Iniciando instala√ß√£o/atualiza√ß√£o do AWS SSO Manager..."
    echo ""
    
    # Verifica se estamos no diret√≥rio correto
    if [ ! -f "$SCRIPT_DIR/functions.sh" ]; then
        log_error "Arquivo functions.sh n√£o encontrado em $SCRIPT_DIR"
        log_error "Execute este script dentro do diret√≥rio aws-sso-manager"
        exit 1
    fi
    
    backup_bashrc
    detect_old_installations
    remove_old_installations
    install_current_version
    reload_environment
    validate_installation
    show_final_instructions
    
    echo ""
    log_success "üéØ Instala√ß√£o/atualiza√ß√£o conclu√≠da com sucesso!"
    log_info "üóëÔ∏è  Backup anterior salvo em: $AWS_SSO_TEMP_BACKUP"
}

# Executa instala√ß√£o
main "$@"